name: Node-app
version: 0.0.31
services:
  node:
    annotations: {}
    apiVersion: ""
    dependsOn:
    - nodeapp-xgest
    id: null
    isAnnotation: null
    labels: {}
    model: meshery-core
    name: node
    namespace: ""
    settings: {}
    traits:
      meshmap:
        edges: []
        elementType: FIELD_REF_NODE
        fieldRefData:
          elementType: FIELD_REF_NODE
          fieldPath: spec.template.spec.containers[0]
          jsonSchemaPath: properties.spec.allOf[0].properties.template.allOf[0].properties.spec.allOf[0].properties.containers.items.allOf[0]
        id: 357c5a1f-ec52-4d30-9c3f-8fd0b89041a1
        label: spec.template.spec.containers[0]
        meshmodel-data:
          category:
            metadata: null
            name: Orchestration & Management
          components: null
          description: ""
          displayName: Meshery Core
          hostID: 26e64aa8-2d86-57bd-92b3-2a73160d27b4
          id: 71af0d59-f11b-5151-924a-f9f805edb3df
          metadata:
            isAnnotation: false
            subCategory: App Definition and Development
            svgColor: ui/public/static/img/meshmodels/meshery-core/color/meshery-core-color.svg
            svgComplete: ""
            svgWhite: ui/public/static/img/meshmodels/meshery-core/color/meshery-core-color.svg
          model:
            version: 0.7.2
          name: meshery-core
          registrant:
            hostname: artifacthub
          relationships: null
          schemaVersion: models.meshery.io/v1beta1
          status: enabled
          subCategory: App Definition and Development
          version: v1.0.0
        meshmodel-metadata:
          capabilities: |-
            {
              "designer": {
                "capabilities": {
                  "config": true,
                  "label": false,
                  "policy": false,
                  "relationships": true,
                  "json-schema": false,
                  "permissions": false,
                  "workflow": false,
                  "gitops": false,
                  "history": false
                },
                "supportsCompoundDragAndDrop": false,
                "edit": {
                  "config": true,
                  "copy": false,
                  "delete": true,
                  "duplicate": false,
                  "reset-styles": false,
                  "resolve": false,
                  "lock": false,
                  "shape": {
                    "convert-shape": true
                  },
                  "style": true
                },
                "label": {
                  "edit": false,
                  "show": true,
                  "sync-with-config-property": "name"
                }
              }
            }
          defaultData: ""
          genealogy: ""
          hasInvalidSchema: true
          isAnnotation: true
          primaryColor: '#326CE5'
          secondaryColor: '#00D3A9'
          shape: circle
          shapePolygonPoints: ""
          status: enabled
          styleOverrides:
            z-index: 4
          styles: ""
          subCategory: ""
          svgColor: ui/public/static/img/meshmodels/meshery-core/color/container-color.svg
          svgComplete: ""
          svgWhite: ui/public/static/img/meshmodels/meshery-core/white/container-white.svg
        parent: 240d975d-3ff2-47d8-b675-82d8bec187af
        position:
          posX: -67.18284458267154
          posY: -54.00351379637928
        whiteboardData: {}
    type: Container
    version: ""
  nodeapp-xgest:
    annotations: {}
    apiVersion: apps/v1
    dependsOn: []
    id: null
    isAnnotation: null
    labels:
      app: node
    model: kubernetes
    name: nodeapp
    namespace: default
    settings:
      spec:
        replicas: 1
        selector:
          match Labels:
            app: node
        template:
          metadata:
            annotations:
              dapr.io/app-id: nodeapp
              dapr.io/app-port: "3000"
              dapr.io/enable-api-logging: "true"
              dapr.io/enabled: "true"
            labels:
              app: node
          spec:
            containers:
            - args: []
              command: []
              env:
              - name: APP_PORT
                value: "3000"
              env From: []
              image: ghcr.io/dapr/samples/hello-k8s-node:latest
              image Pull Policy: Always
              name: node
              ports:
              - container Port: 3000
              volume Devices: []
              volume Mounts: []
    traits:
      meshmap:
        edges:
        - data:
            id: 50f8efe1-a290-48e3-b218-f0c592cecbdb
            metadata:
              port: 80
              protocol: TCP
            source: f79b64da-dd61-4444-baba-bcadb23603a8
            subType: Network
            target: 240d975d-3ff2-47d8-b675-82d8bec187af
          style:
            control-point-distances: null
            control-point-weights: "0.5"
            curve-style: bezier
            haystack-radius: "0"
            line-color: rgb(153,153,153)
            line-style: dotted
            opacity: "1"
            segment-distances: 20px
            segment-weights: "0.5"
            target-arrow-shape: vee
            taxi-direction: auto
            taxi-turn: 50%
            taxi-turn-min-distance: 10px
            width: 1.5px
        fieldRefData: {}
        id: 240d975d-3ff2-47d8-b675-82d8bec187af
        meshmodel-metadata:
          capabilities: |-
            {
              "fieldRefs": [
                {
                  "fieldPath": "spec.template.spec.containers",
                  "jsonSchemaPath": "properties.spec.allOf[0].properties.template.allOf[0].properties.spec.allOf[0].properties.containers.items.allOf[0]",
                  "component": {
                    "kind": "Container",
                    "model": "meshery-core"
                  },
                  "renderChildren": true
                },
                {
                  "fieldPath": "spec.template.spec.init Containers",
                  "jsonSchemaPath": "properties.spec.allOf[0].properties.template.allOf[0].properties.spec.allOf[0].properties.init Containers.items.allOf[0]",
                  "component": {
                    "kind": "Container",
                    "model": "meshery-core"
                  },
                  "renderChildren": true
                }
              ],
              "designer": {
                "edit": {
                  "shape": {
                    "convert-shape": false
                  }
                }
              }
            }
          defaultData: ""
          genealogy: parent
          isAnnotation: false
          isCustomResource: false
          isModelAnnotation: "FALSE"
          isNamespaced: true
          logoURL: Created by Meshery Authors
          model: kubernetes
          modelDisplayName: Kubernetes
          primaryColor: '#326CE5'
          secondaryColor: '#7aa1f0'
          shape: round-rectangle
          shapePolygonPoints: ""
          status: enabled
          styleOverrides: '{"border-width":2,"background-opacity":0.5}'
          styles: '{"border-width":2,"background-opacity":0.5}'
          subCategory: ""
          svgColor: ui/public/static/img/meshmodels/kubernetes/color/deployment-color.svg
          svgComplete: ui/public/static/img/meshmodels/kubernetes/complete/deployment-complete.svg
          svgWhite: ui/public/static/img/meshmodels/kubernetes/white/deployment-white.svg
        position:
          posX: -67.18284458267154
          posY: -45.00351379637928
        whiteboardData:
          style: {}
    type: Deployment
    version: ""
  nodeapp-yqgqx:
    annotations: {}
    apiVersion: v1
    dependsOn: []
    id: null
    isAnnotation: null
    labels:
      app: node
    model: kubernetes
    name: nodeapp
    namespace: default
    settings:
      spec:
        ports:
        - port: 80
          protocol: TCP
          target Port: 3000
        selector:
          app: node
        type: LoadBalancer
    traits:
      meshmap:
        edges:
        - data:
            id: 50f8efe1-a290-48e3-b218-f0c592cecbdb
            metadata:
              port: 80
              protocol: TCP
            source: f79b64da-dd61-4444-baba-bcadb23603a8
            subType: Network
            target: 240d975d-3ff2-47d8-b675-82d8bec187af
          style:
            control-point-distances: null
            control-point-weights: "0.5"
            curve-style: bezier
            haystack-radius: "0"
            line-color: rgb(153,153,153)
            line-style: dotted
            opacity: "1"
            segment-distances: 20px
            segment-weights: "0.5"
            target-arrow-shape: vee
            taxi-direction: auto
            taxi-turn: 50%
            taxi-turn-min-distance: 10px
            width: 1.5px
        fieldRefData: {}
        id: f79b64da-dd61-4444-baba-bcadb23603a8
        meshmodel-metadata:
          capabilities: ""
          defaultData: ""
          genealogy: ""
          isAnnotation: false
          isCustomResource: false
          isModelAnnotation: "FALSE"
          isNamespaced: true
          logoURL: https://github.com/cncf/artwork/blob/master/projects/kubernetes/icon/white/kubernetes-icon-white.svg
          model: kubernetes
          modelDisplayName: Kubernetes
          primaryColor: '#326CE5'
          secondaryColor: '#7aa1f0'
          shape: round-triangle
          shapePolygonPoints: ""
          status: enabled
          styleOverrides:
            background-position-y: 4.5
            height: 20
            padding: 12
            width: 20
            x: 10px
            "y": 12px
            z-index: 3
          styles: '{"height":20,"width":20,"padding":12,"background-position-y":4.5,"x":"10px","y":"12px"}'
          subCategory: ""
          svgColor: ui/public/static/img/meshmodels/kubernetes/color/service-color.svg
          svgComplete: ""
          svgWhite: ui/public/static/img/meshmodels/kubernetes/white/service-white.svg
        position:
          posX: 46.09793569613229
          posY: -43.82033076979026
        whiteboardData:
          style: {}
    type: Service
    version: ""
